###############################################
# Test compilation for verbs (stems, affixes) #
###############################################

# May want to use this if symbol pairs grow - needs foma
# set lexc-align ON

# read lexc verbstems.lexc
# read lexc verb_lexicon.lexc
read lexc @srcdir@/stems/verb_stems.lexc
define Stems

read lexc @srcdir@/affixes/verb_inner_affixes.lexc
define InnerAffixes

read lexc @srcdir@/affixes/verb_middle_affixes.lexc
define MiddleAffixes

read lexc @srcdir@/affixes/verb_outer_affixes.lexc
define OuterAffixes

read lexc @srcdir@/affixes/verb_oblique_affixes.lexc
define ObliqueAffixes

# Mark prefix type (insert corresponding flags to the
# original prefixes we know to be present from the lexical entry.
# ab=cd_ef.gh => ab@P.PREFIX.OUTER@=cd@P.PREFIX.MIDDLE@_ef@P.PREFIX.INNER@.gh

define MarkPrefixes ~$["@P.PREFIX.OUTER@"|"@P.PREFIX.INNER@"|"@P.PREFIX.MIDDLE@"] .o.
                  "=" -> "@P.PREFIX.OUTER@" "=" , 
                  "_" -> "@P.PREFIX.MIDDLE@" "_" , 
                  "." -> "@P.PREFIX.INNER@" ".";

# Insert . (inner), _ (middle), and = (outer) if missing in the intermediate rep:
# tsiy > =_.tsiy
# ts'á=zíd > ts'á=_.zíd
# tsí=di.tł'á > tsí=_di.tł'á
# gu.blah > =_gu.blah
# gu_blah > =gu_.blah

# (1) No . > insert . after last marker (= or _), or in the beginning if none exists
# (2) No _ > insert _ (a) after =, if one exists, or (b) beginning
# (3) No = > insert at beginning

define InsInner  [..] -> "." || "_" _ ~$"." .#. .o. 
              [..] -> "." || "=" _ ~$"." .#. .o. 
              [..] -> "." || .#. _ ~$"." .#. ;

define InsMiddle [..] -> "_" || "=" _ ~$["_"] .#. .o. 
              [..] -> "_" || .#. _ ~$["_"] .#. ; 

define InsOuter  [..] -> "=" || .#. _ ~$["="] .#. ;

# We temporarily keep the boundary symbol for inner affixes (".") in place
# so that we can target morphophonology there more easily (especially when
# aiming to drop the "weak" /i/ vowels that appear in inner lexical prefixes).
read regex Stems .o. MarkPrefixes .o. InsInner .o. InsMiddle .o. InsOuter .o. 
#            "." -> InnerAffixes , "_" -> MiddleAffixes , "=" -> OuterAffixes;
            "." -> "." InnerAffixes , "_" -> MiddleAffixes , "=" -> OuterAffixes;
define WordForms;

# Concatenate ObliqueAffixes and the other inflectional FSTs.
read regex WordForms .o. [..] -> ObliqueAffixes || .#. _;

twosided flag-diacritics
define Grammar;

# Morphophonology

source @srcdir@/phonology.xfscript
define MorphoPhonology;

read lexc @srcdir@/affixes/verb_tags.lexc
define Tags;

# To prevent morphophonology to be tripped up be intervening flags
set flag-is-epsilon ON

# regex Grammar Tags;

# Tentative code for dealing with Morphophonology as read for a separate
# file. Though we would want to figure a way to compose each rewrite rule
# the the morphological component one-by-one for faster compilation.

regex [Grammar Tags] .o. MorphoPhonology ;

# regex [Grammar Tags] .o. deletePrefixI .o. hToneSpreading .o. hToneSpreadingCleanup .o. deleteBoundarySymbol .o. uBeforeA .o. aBeforeI .o. lowABeforeI .o. iBeforeA .o. iBeforeO .o. uBeforeO .o. lInitialStemsSbjPl2 .o. lInitialStemsSbjPl2Cleanup .o. slDissimilation .o. zhDevoicing .o. zDevoicing;


#eliminate flag TAMA
#eliminate flag SUBJECTNUMBER
#eliminate flag SUBJECTPERSON
#eliminate flag DISTRIBUTIVE
#eliminate flag OBJECTNUMBER
#eliminate flag OBJECTPERSON
#eliminate flag VALENCE
#eliminate flag PREFIX
#eliminate flag ASPECT
