###############################################
# Test compilation for verbs (stems, affixes) #
###############################################

# May want to use this if symbol pairs grow - needs foma
#set lexc-align ON

read lexc verbstems.lexc
def Stems

read lexc verb_inner_affixes.lexc
def InnerAffixes

read lexc verb_middle_affixes.lexc
def MiddleAffixes

read lexc verb_outer_affixes.lexc
def OuterAffixes

# Mark prefix type (insert corresponding flags to the
# original prefixes we know to be present from the lexical entry.
# ab=cd_ef.gh => ab@P.PREFIX.OUTER@=cd@P.PREFIX.MIDDLE@_ef@P.PREFIX.INNER@.gh

def MarkPrefixes ~$["@P.PREFIX.OUTER@"|"@P.PREFIX.INNER@"|"@P.PREFIX.MIDDLE@"] .o.
                  "=" -> "@P.PREFIX.OUTER@" "=" , 
                  "_" -> "@P.PREFIX.MIDDLE@" "_" , 
                  "." -> "@P.PREFIX.INNER@" ".";

# Insert . (inner), _ (middle), and = (outer) if missing in the intermediate rep:
# tsiy > =_.tsiy
# ts'á=zíd > ts'á=_.zíd
# tsí=di.tł'á > tsí=_di.tł'á
# gu.blah > =_gu.blah
# gu_blah > =gu_.blah

# (1) No . > insert . after last marker (= or _), or in the beginning if none exists
# (2) No _ > insert _ (a) after =, if one exists, or (b) beginning
# (3) No = > insert at beginning

def InsInner  [..] -> "." || "_" _ ~$"." .#. .o. 
              [..] -> "." || "=" _ ~$"." .#. .o. 
              [..] -> "." || .#. _ ~$"." .#. ;

def InsMiddle [..] -> "_" || "=" _ ~$["_"] .#. .o. 
              [..] -> "_" || .#. _ ~$["_"] .#. ; 

def InsOuter  [..] -> "=" || .#. _ ~$["="] .#. ;

read regex Stems .o. MarkPrefixes .o. InsInner .o. InsMiddle .o. InsOuter .o. 
            "." -> InnerAffixes , "_" -> MiddleAffixes , "=" -> OuterAffixes;

twosided flag-diacritics
def Grammar;

read lexc verbtags.lexc
define Tags;

regex Grammar Tags ;

#eliminate flag DISTRIBUTIVE
#eliminate flag OBJECTNUMBER
#eliminate flag OBJECTPERSON
#eliminate flag VALENCE
#eliminate flag TAMA
#eliminate flag PREFIX
#eliminate flag ASPECT
#eliminate flag SUBJECTNUMBER
#eliminate flag SUBJECTPERSON
