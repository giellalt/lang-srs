# Test compilation for verbs (stems, affixes)

#set lexc-align ON

read lexc verbstems.lexc
def Stems

read lexc verb_inner_affixes.lexc
def InnerAffixes

read lexc verb_middle_affixes.lexc
def MiddleAffixes

read lexc verb_outer_affixes.lexc
def OuterAffixes

# Insert . (inner), _ (middle), and = (outer) if missing in the intermediate rep:
# tsiy > =_.tsiy
# ts'á=zíd > ts'á=_.zíd
# tsí=di.tł'á > tsí=_di.tł'á
# gu.blah > =_gu.blah
# gu_blah > =gu_.blah

# Mark prefix type (insert corresponding flags to the
# original prefixes we know to be present from the lexical entry.

def MarkPrefixes "=" -> "=" "@P.PREFIX.OUTER@" , "_" -> "_" "@P.PREFIX.MIDDLE@" , "." -> "." "@P.PREFIX.INNER@";

# (1) No . > insert . after last marker (= or _), or in the beginning if none exists
# (2) No _ > insert _ (a) after =, if one exists, or (b) beginning
# (3) No = > insert at beginning

def InsInner  [..] -> "." || "_" _ ~$"." .#. .o. 
              [..] -> "." || "=" _ ~$"." .#. .o. 
              [..] -> "." || .#. _ ~$"." .#. ;

def InsMiddle [..] -> "_" || "=" _ ~$["_"] .#. .o. 
              [..] -> "_" || .#. _ ~$["_"] .#. ; 

def InsOuter  [..] -> "=" || .#. _ ~$["="] .#. ;

def Grammar Stems        .o. 
            MarkPrefixes .o.
            InsInner     .o. 
            InsMiddle    .o. 
            InsOuter     .o. 
            "." -> InnerAffixes , "_" -> MiddleAffixes , "=" -> OuterAffixes;


regex Grammar;
twosided flag-diacritics
eliminate flags

#echo ELIMINATE VALENCE
#eliminate flag VALENCE
#echo ELIMINATE TAMA
#eliminate flag TAMA
#echo ELIMINATE ASPECT
#eliminate flag ASPECT
#echo ELIMINATE SUBJECTPERSON
#eliminate flag SUBJECTPERSON
#echo ELIMINATE SUBJECTPERSON
#eliminate flag SUBJECTNUMBER
#echo ELIMINATE OBJECTNUMBER
#eliminate flag OBJECTNUMBER
#echo ELIMINATE DISTRIBUTIVE 
#eliminate flag DISTRIBUTIVE
